<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[十二]]></title>
    <link>http://vFix.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[没啥特长，会写点代码，我自嘲码农，可你叫我码农我就和你急，请唤我为F-12]]></description>
    <pubDate>Mon, 19 Sep 2016 15:51:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[知其所以然-Binding_System_of_Vue]]></title>
      <link>http://vFix.github.io/2016/09/20/%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6-Binding-System-of-Vue/</link>
      <guid>http://vFix.github.io/2016/09/20/%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6-Binding-System-of-Vue/</guid>
      <pubDate>Mon, 19 Sep 2016 22:42:00 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="u76EE_u6807"><a href="#u76EE_u6807" class="headerlink" title="目标"></a>目标</h1><ul>
<li>[ ] 理解Vue的binding系统工作原理</li>
<li>[ ] 理解单向绑定和双向]]>
      </description>
      <content:encoded><![CDATA[<h1 id="u76EE_u6807"><a href="#u76EE_u6807" class="headerlink" title="目标"></a>目标</h1><ul>
<li>[ ] 理解Vue的binding系统工作原理</li>
<li>[ ] 理解单向绑定和双向绑定实现方法</li>
<li>[ ] 实现一个简单的单向绑定的Demo</li>
</ul>
<h1 id="u5F15_u5165"><a href="#u5F15_u5165" class="headerlink" title="引入"></a>引入</h1><h2 id="DOM_u66F4_u65B0"><a href="#DOM_u66F4_u65B0" class="headerlink" title="DOM更新"></a>DOM更新</h2><p>浏览器构建DOM Tree，渲染视图，并提供DOM API更新视图。浏览器保证视图的渲染结果和DOM Tree中的数据同步。开发者经常会从服务器加载数据更新到视图上，或根据用户的交互改变视图。这些改变视图的方式可以抽象成改变视图状态数据（即数据驱动视图）。</p>
<p>我们一般都会使用data object保存从服务器加载到的数据或记录用户交互的状态数据，然后把这些data object里的数据同步到DOM对象的各个属性值上，触发视图的更新。</p>
<p>一般的做法是这样的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  Hello,<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"name"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'f-12'</span>;</span><br><span class="line">  $(<span class="string">'#name'</span>).text(name);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>name代表data object（既可能是从服务器上加载的数据，也可能是用户交互产生的状态数据），当我们把值赋给DOM的属性（使用原生DOM API或jQuery)，修改视图后，data，object就和DOM的属性值没有关系了，假如我们再次更新name，DOM属性值并不会变化，因而视图也不会变化。我们必须再次修改DOM属性才可以更新视图，即每次状态数据发生变动时我们必须手动更新视图。</p>
<p>手动更新DOM显得很繁琐。前端工程更加复杂，用户交互更加复杂，单页应用更加流行，产生了更多的状态数据，这些因素也凸显了手动更新DOM的缺点。</p>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>Binding的思想就是建立data object和DOM对象之前的关系，使得我们修改data object上的属性值时自动完成DOM对象的更新。</p>
<h1 id="u89C2_u5BDF_u8005_u6A21_u5F0F"><a href="#u89C2_u5BDF_u8005_u6A21_u5F0F" class="headerlink" title="观察者模式"></a>观察者模式</h1><ul>
<li>原理</li>
<li>javascript实现的观察者模式Demo</li>
</ul>
<h1 id="Vue_u7684binding_u5B50_u7CFB_u7EDF"><a href="#Vue_u7684binding_u5B50_u7CFB_u7EDF" class="headerlink" title="Vue的binding子系统"></a>Vue的binding子系统</h1><img src="/2016/09/20/知其所以然-Binding-System-of-Vue/vue_binding_model.png" alt="vue_binding_model.png" title="">
]]></content:encoded>
      <comments>http://vFix.github.io/2016/09/20/%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6-Binding-System-of-Vue/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Hello World]]></title>
      <link>http://vFix.github.io/2016/07/07/hello-world/</link>
      <guid>http://vFix.github.io/2016/07/07/hello-world/</guid>
      <pubDate>Thu, 07 Jul 2016 09:21:36 GMT</pubDate>
      <description>
      <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for m]]>
      </description>
      <content:encoded><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content:encoded>
      <comments>http://vFix.github.io/2016/07/07/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Python-Reference阅读笔记]]></title>
      <link>http://vFix.github.io/2016/02/26/Python-Reference%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <guid>http://vFix.github.io/2016/02/26/Python-Reference%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Fri, 26 Feb 2016 14:27:17 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="u6570_u636E_u6A21_u578B"><a href="#u6570_u636E_u6A21_u578B" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="u5BF9_u8C61_u3001_u]]>
      </description>
      <content:encoded><![CDATA[<h1 id="u6570_u636E_u6A21_u578B"><a href="#u6570_u636E_u6A21_u578B" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="u5BF9_u8C61_u3001_u503C_u548C_u7C7B_u578B"><a href="#u5BF9_u8C61_u3001_u503C_u548C_u7C7B_u578B" class="headerlink" title="对象、值和类型"></a>对象、值和类型</h2><ul>
<li><code>id()</code>函数与对象ID</li>
<li><code>type()</code>函数与对象类型</li>
<li>对象创建后天生具有ID，type</li>
<li>值可变为可变对象，值不可变为不可变对象，由type决定</li>
</ul>
<h2 id="u6807_u51C6_u7C7B_u578B_u7684_u5C42_u6B21_u7ED3_u6784"><a href="#u6807_u51C6_u7C7B_u578B_u7684_u5C42_u6B21_u7ED3_u6784" class="headerlink" title="标准类型的层次结构"></a>标准类型的层次结构</h2><ul>
<li><code>None</code></li>
<li><code>NotImplemented</code></li>
<li><code>Ellipsis</code></li>
<li>Numbers有numbers模块定义类<ul>
<li>numbers.Number</li>
<li>numbers.Complex</li>
<li>numbers.Real</li>
<li>numbers.Rational</li>
<li>numbers.Integral</li>
</ul>
</li>
<li>Sequence<br><strong>可变</strong>  <ul>
<li>Strings：<code>chr()</code>,<code>ord()</code>函数在字符和字节序数间转换</li>
<li>Unicode: <code>unichr()</code>, <code>ord()</code>在Unicode和序数间转换</li>
<li>Tuple:<br><strong>不可变</strong>  </li>
<li>Lists:</li>
<li>Bytearray: <code>bytearray()</code>创建</li>
</ul>
</li>
<li>Sets<ul>
<li>set: <code>set()</code>创建，可变容器</li>
<li>frozenset: <code>frozenset()</code>创建，不可变容器</li>
</ul>
</li>
<li>Maps<ul>
<li>dict: <code>{}</code>创建，键是不可变对象</li>
</ul>
</li>
<li>Callable</li>
<li>User-defined functions<br><strong>函数属性</strong>  <ul>
<li><code>__doc__</code></li>
<li><code>__name__</code></li>
<li><code>__module__</code></li>
<li><code>__defaults__</code></li>
<li><code>__code__</code></li>
<li><code>__globals__</code></li>
<li><code>__dict__</code></li>
<li><code>__closure__</code></li>
</ul>
</li>
<li>User-defined methods<br><strong>将class，instance和Callable对象结合起来</strong>  <ul>
<li>绑定的User-defined method: 通过类获取，im_self指向None</li>
<li>未绑定的User-defined method: 通过实例获取，im_self指向实例</li>
<li>im_class指向类对象，im_func指向原始函数对象</li>
<li><strong>doc</strong></li>
<li><strong>name</strong></li>
</ul>
</li>
<li>静态方法对象</li>
<li>类方法对象</li>
<li>Generator</li>
<li>Built-in functions<ul>
<li>封装C函数</li>
<li>特殊属性</li>
</ul>
</li>
<li>Built-in methods<ul>
<li>C函数的另一种封装，包含传递给C函数实例作为隐式参数</li>
</ul>
</li>
<li>Module<ul>
<li><code>import</code>语句导入的对象</li>
<li>包含一个字典实现的命名空间，属性的引用被转换成查询这个字典</li>
<li><code>__name__</code>为模块的名字</li>
<li><code>__doc__</code>指模块的文档字符串，如果没有则为None</li>
<li><code>__file__</code>为模块加载的文件路径</li>
</ul>
</li>
<li>Classes<br><strong>Class type</strong>:新式类，可调用，通常作为工厂创建它们自己的实例,调用参数传递给<code>__new__()</code>，然后在调用<code>__init__()</code><br><strong>Classic Classes</strong>:类调用时，参数传递给<code>__init__()</code>方法<ul>
<li>用字典对象实现的命名空间,类属性的引用被转换为这个字典的查询</li>
<li>类属性的赋值将更新该类的字典，永远不会更新其基类的字典。</li>
</ul>
</li>
<li>Class instances<ul>
<li>具有<code>__call__()</code>方法时实例可以调用</li>
<li>实例属性字典-&gt;类属性字典-&gt;<code>__getattr__()</code>方法</li>
<li>属性的赋值和删除会更新实例字典，永远不会是类的字典。如果类有一个<strong>setattr</strong>() 或者<strong>delattr</strong>() 方法，那么会调用这个方法而不是直接更新实例的字典。</li>
</ul>
</li>
<li>File</li>
<li>内部类型</li>
<li>Code objects</li>
<li>Frame objects<br><strong>执行帧</strong></li>
<li>Traceback objects</li>
<li>Slice objects<h2 id="u65B0_u5F0F_u7C7B_u548C_u7ECF_u5178_u7C7B"><a href="#u65B0_u5F0F_u7C7B_u548C_u7ECF_u5178_u7C7B" class="headerlink" title="新式类和经典类"></a>新式类和经典类</h2><h2 id="u7279_u6B8A_u65B9_u6CD5_u7684_u540D_u5B57"><a href="#u7279_u6B8A_u65B9_u6CD5_u7684_u540D_u5B57" class="headerlink" title="特殊方法的名字"></a>特殊方法的名字</h2></li>
<li><strong>运算符重载</strong><ul>
<li><code>__getitem__()</code>下标</li>
<li><code>object.__new__(cls[, ...])</code>构造</li>
<li><code>object.__init__(self[, ...])</code>初始化，子类需要显式调用基类的<strong>init</strong></li>
<li><code>object.__del__(self)</code>del操作符</li>
<li><code>object.__repr__(self)</code>对象正式字符串表示<code>repr()</code>函数调用</li>
<li><code>object.__str__(self)</code>对象非正式字符串表示<code>str()</code>函数调用<br><strong>比较操作符</strong>  </li>
<li><code>object.__lt__(self, other)</code></li>
<li><code>object.__le__(self, other)</code></li>
<li><code>object.__eq__(self, other)</code></li>
<li><code>object.__ne__(self, other)</code></li>
<li><code>object.__gt__(self, other)</code></li>
<li><code>object.__ge__(self, other)</code></li>
<li><code>object.__hash__(self)</code></li>
<li><code>object.__nonzero__(self)</code></li>
<li><code>object.__unicode__(self)</code><h2 id="u81EA_u5B9A_u4E49_u5C5E_u6027_u8BBF_u95EE"><a href="#u81EA_u5B9A_u4E49_u5C5E_u6027_u8BBF_u95EE" class="headerlink" title="自定义属性访问"></a>自定义属性访问</h2></li>
<li><code>__getattr__()</code></li>
<li><code>__getattribute__()</code></li>
<li><code>__setattr__()</code></li>
<li><code>__delattr__()</code><h1 id="u6267_u884C_u6A21_u578B"><a href="#u6267_u884C_u6A21_u578B" class="headerlink" title="执行模型"></a>执行模型</h1>TBD</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <comments>http://vFix.github.io/2016/02/26/Python-Reference%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[CloundFoundry使用笔记]]></title>
      <link>http://vFix.github.io/2016/01/07/CloundFoundry-Notes/</link>
      <guid>http://vFix.github.io/2016/01/07/CloundFoundry-Notes/</guid>
      <pubDate>Thu, 07 Jan 2016 00:54:05 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h1><h1 id="Application"><a href="#Application" class="headerlink" title=]]>
      </description>
      <content:encoded><![CDATA[<h1 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h1><h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><p>Designing and Running an Application in the Cloud</p>
<h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><ul>
<li>12-factors Application</li>
<li><code>.cfingore</code></li>
<li>多实例增加可用性</li>
<li>Buildpacks：提供framework and runtime support</li>
</ul>
<h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><ul>
<li><p>部署流程<br><strong>应用无关的部署过程</strong>  </p>
<ul>
<li>上传并保存应用文件</li>
<li>检查并保存应用metadata</li>
<li>创建应用的Droplet（执行单位）</li>
<li>选择DEA运行Droplet</li>
<li>应用启动可用</li>
</ul>
<p><strong>应用相关</strong>  </p>
<ul>
<li>部署准备：cloud-ready，resources，service instances，buildpack</li>
<li>Credentials and Target<ul>
<li>API endpoint（</li>
<li>username and password</li>
<li>workspace -&gt; organization -&gt; space</li>
</ul>
</li>
<li>域名配置</li>
<li>部署选项：设置选项值，配置环境变量</li>
</ul>
</li>
</ul>
<h1 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h1><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><ul>
<li><strong>Services</strong>  <ul>
<li>cf集成</li>
<li>交付及操作资源的系统</li>
<li>实现了service broker API</li>
<li>cloud controller是其客户端</li>
</ul>
</li>
<li><strong>Service Broker</strong>  <ul>
<li>service中实现service broker API的组件</li>
</ul>
</li>
<li><strong>Service Instances</strong>  <ul>
<li>cf集成的</li>
<li>被交付及操作的资源</li>
</ul>
</li>
<li><strong>UPSI</strong>  <ul>
<li>User-Provided Service Instances</li>
<li>不被cf管理的资源，比如其他地方部署的可通过url访问的一个数据库实例</li>
</ul>
</li>
</ul>
<h2 id="Services_vs_Service_Instances"><a href="#Services_vs_Service_Instances" class="headerlink" title="Services vs Service Instances"></a>Services vs Service Instances</h2><ul>
<li>管理服务实例<ul>
<li>显示服务列表：cf marketplace</li>
<li>创建服务实例：<code>cf create-service SERVICE PLAN SERVICE_INSTANCE</code></li>
<li>显示服务实例列表 &amp; 显示服务实例信息</li>
<li>rename服务实例</li>
<li>Delete服务实例</li>
</ul>
</li>
<li>管理Service key：增删改查<br>Service key：手动维护的service实例凭证</li>
</ul>
<h2 id="Service_Instance_Credentials"><a href="#Service_Instance_Credentials" class="headerlink" title="Service Instance Credentials"></a>Service Instance Credentials</h2><ul>
<li>自动提供访问service instance的凭证</li>
<li>Application Binding</li>
<li>Service Keys</li>
</ul>
<h1 id="u81EA_u5B9A_u4E49Services"><a href="#u81EA_u5B9A_u4E49Services" class="headerlink" title="自定义Services"></a>自定义Services</h1><h2 id="Service_Broker"><a href="#Service_Broker" class="headerlink" title="Service Broker"></a>Service Broker</h2><h3 id="u67B6_u6784_u56FE"><a href="#u67B6_u6784_u56FE" class="headerlink" title="架构图"></a>架构图 <img src="http://docs.cloudfoundry.org/services/images/managed-services.png" alt="架构图"></h3><h3 id="Service_Broker_API"><a href="#Service_Broker_API" class="headerlink" title="Service Broker API"></a><a href="http://docs.cloudfoundry.org/services/api.html">Service Broker API</a></h3><ul>
<li>catalog</li>
<li>bind</li>
<li>unbind</li>
<li>deprovision (delete)</li>
</ul>
<h3 id="u7BA1_u7406Service_Broker"><a href="#u7BA1_u7406Service_Broker" class="headerlink" title="管理Service Broker"></a>管理Service Broker</h3><p><strong>注册</strong>  </p>
<ul>
<li>部署实现了Service Broker API的应用</li>
<li>执行注册命令<code>cf create-service-broker mybrokername someuser somethingsecure http://mybroker.example.com/</code></li>
<li>权限</li>
</ul>
<p><strong>Make Plans Public</strong>  </p>
<ul>
<li>默认注册后为私有的</li>
</ul>
<h2 id="Catalog_Metadata"><a href="#Catalog_Metadata" class="headerlink" title="Catalog Metadata"></a>Catalog Metadata</h2><ul>
<li>Services Marketplace聚集各个Service</li>
<li>Broker的catalog数据，展示给end users</li>
<li>End users通过cloud controller clients获取catalog数据  </li>
<li>不同clients可以使用不同的catalog数据,通过检测metadata字段</li>
</ul>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><ul>
<li>服务实例为bindable</li>
<li>binding后分配的凭证写在VCAP_SERVICES环境变量中</li>
</ul>
<h2 id="Dashboard_Single_Sign-On"><a href="#Dashboard_Single_Sign-On" class="headerlink" title="Dashboard Single Sign-On"></a>Dashboard Single Sign-On</h2><p>TBD</p>
<h1 id="Buildpacks"><a href="#Buildpacks" class="headerlink" title="Buildpacks"></a>Buildpacks</h1><h2 id="u6982_u5FF5"><a href="#u6982_u5FF5" class="headerlink" title="概念"></a>概念</h2><p>为应用提供framework and runtime support</p>
<ul>
<li>确定需要下载的依赖</li>
<li>确定和服务通信的应用配置</li>
<li><a href="https://github.com/cloudfoundry/buildpack-packager">Buildpack Packager</a></li>
<li><a href="http://docs.cloudfoundry.org/buildpacks/">System Buildpacks</a></li>
</ul>
<h2 id="Detection"><a href="#Detection" class="headerlink" title="Detection"></a>Detection</h2><ul>
<li>detection priority list</li>
<li>优先级一次检测，检测成功则启动，检测失败报错<code>Unable to detect a supported application type</code></li>
</ul>
<h2 id="u81EA_u5B9A_u4E49"><a href="#u81EA_u5B9A_u4E49" class="headerlink" title="自定义"></a>自定义</h2><p><strong>structure</strong><br>主要由三个脚本构成<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> bin</span><br><span class="line"></span>-<span class="ruby">--- detect</span><br><span class="line"></span>-<span class="ruby">--- compile</span><br><span class="line"></span>-<span class="ruby">--- release</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>bin/detect:以app的build目录为参数调用，返回0(匹配)或1(不匹配)</li>
<li>bin/compile:构建Droplet，以build目录和cache目录为参数</li>
<li>bin/release: 以build位置为参数，必须生成yaml文件</li>
</ul>
<p><strong>打包</strong>  </p>
<ul>
<li>使用buildpacks manager在线使用buildpack</li>
<li>上传buildpack，离线使用</li>
</ul>
<p><strong>使用自定义buildpack部署应用</strong><br>push时指定-b参数</p>
]]></content:encoded>
      <comments>http://vFix.github.io/2016/01/07/CloundFoundry-Notes/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Node-App设计]]></title>
      <link>http://vFix.github.io/2015/12/25/Node-App%E8%AE%BE%E8%AE%A1-01/</link>
      <guid>http://vFix.github.io/2015/12/25/Node-App%E8%AE%BE%E8%AE%A1-01/</guid>
      <pubDate>Fri, 25 Dec 2015 14:47:16 GMT</pubDate>
      <description>
      <![CDATA[<p>本文是阅读<em>The Node Beginner Book</em>后的总结</p>
<h2 id="u7528_u4F8B"><a href="#u7528_u4F8B" class="headerlink" title="用例"></a>用例</h2><p><str]]>
      </description>
      <content:encoded><![CDATA[<p>本文是阅读<em>The Node Beginner Book</em>后的总结</p>
<h2 id="u7528_u4F8B"><a href="#u7528_u4F8B" class="headerlink" title="用例"></a>用例</h2><p><strong>功能描述</strong></p>
<ul>
<li><a href="http://domain/start展示欢迎页，提供一个文件上传按钮">http://domain/start展示欢迎页，提供一个文件上传按钮</a></li>
<li><a href="http://domain/upload展示提交后的文件内容">http://domain/upload展示提交后的文件内容</a></li>
</ul>
<p><strong>设计考虑</strong></p>
<ul>
<li>功能模块化</li>
<li>非阻塞</li>
<li>依赖注入</li>
</ul>
<h2 id="u6A21_u5757_u5206_u6790"><a href="#u6A21_u5757_u5206_u6790" class="headerlink" title="模块分析"></a>模块分析</h2><ul>
<li>处理HTTP请求——server：使用http包负责创建启动server</li>
<li>处理不同请求路径——router：负责匹配request中的不同path并分派到不同处理程序</li>
<li>请求处理程序——handler：不同请求的业务逻辑</li>
<li>文件系统操作——fs：使用fs包读取文件内容</li>
<li>文件上传功能——upload：</li>
<li>入口——index：启动整个应用，组装其他模块</li>
</ul>
<h2 id="u4F9D_u8D56_u5206_u6790"><a href="#u4F9D_u8D56_u5206_u6790" class="headerlink" title="依赖分析"></a>依赖分析</h2><ul>
<li>server使用router分派request</li>
<li>router进行request中的pathname和handler的映射调用</li>
<li>handler从request读取用户输入，将处理结果写入response</li>
<li>index进行依赖注入，将handler传递给router，将router传递给server</li>
</ul>
<h2 id="u8BE6_u7EC6_u8BBE_u8BA1"><a href="#u8BE6_u7EC6_u8BBE_u8BA1" class="headerlink" title="详细设计"></a>详细设计</h2><p><strong>server</strong></p>
<ul>
<li>start(router):创建服务器，监听端口</li>
</ul>
<p><strong>router</strong></p>
<ul>
<li>config(handler):配置处理历程</li>
<li>router(request,response):</li>
</ul>
<p><strong>handler</strong></p>
<ul>
<li>start(request,response):展示欢迎页面</li>
<li>upload(request,respoinse):接受上传的文件，展示上传内容</li>
</ul>
]]></content:encoded>
      <comments>http://vFix.github.io/2015/12/25/Node-App%E8%AE%BE%E8%AE%A1-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[博客建设日志]]></title>
      <link>http://vFix.github.io/2015/12/18/BlogLog/</link>
      <guid>http://vFix.github.io/2015/12/18/BlogLog/</guid>
      <pubDate>Fri, 18 Dec 2015 13:39:32 GMT</pubDate>
      <description>
      <![CDATA[<ul>
<li>2015-12-18: 配置NexT主题（感谢作者iissnan）</li>
<li>2016-01-07: 增加社交账户主页链接</li>
</ul>
]]>
      </description>
      <content:encoded><![CDATA[<ul>
<li>2015-12-18: 配置NexT主题（感谢作者iissnan）</li>
<li>2016-01-07: 增加社交账户主页链接</li>
</ul>
]]></content:encoded>
      <comments>http://vFix.github.io/2015/12/18/BlogLog/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
